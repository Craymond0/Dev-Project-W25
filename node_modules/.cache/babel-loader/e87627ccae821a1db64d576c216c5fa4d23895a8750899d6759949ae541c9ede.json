{"ast":null,"code":"// src/solana/createPrediction.js\nimport { Program, web3 } from \"@project-serum/anchor\";\nimport idl from \"../idl/umich_predictions.json\"; // ‚Üê üí° THIS LINE\n\nimport { getProvider } from \"./getProvider\";\nconst programID = new web3.PublicKey(\"eioYwjxzGasyXTBJQ6aRJFFczARqj6yXPxMvFr56swK\"); // üëà use your real one here\nconst {\n  SystemProgram\n} = web3;\nexport async function createPrediction(wallet, questionText) {\n  const provider = getProvider(wallet);\n  const program = new Program(idl, programID, provider);\n  const predictionKeypair = web3.Keypair.generate();\n  await program.methods.createPrediction(questionText).accounts({\n    prediction: predictionKeypair.publicKey,\n    creator: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).signers([predictionKeypair]).rpc();\n  console.log(\"‚úÖ Created prediction at:\", predictionKeypair.publicKey.toBase58());\n}","map":{"version":3,"names":["Program","web3","idl","getProvider","programID","PublicKey","SystemProgram","createPrediction","wallet","questionText","provider","program","predictionKeypair","Keypair","generate","methods","accounts","prediction","publicKey","creator","systemProgram","programId","signers","rpc","console","log","toBase58"],"sources":["/Users/aaryaupadhyay/umich-prediction-market/src/solana/createPrediction.js"],"sourcesContent":["// src/solana/createPrediction.js\nimport { Program, web3 } from \"@project-serum/anchor\";\nimport idl from \"../idl/umich_predictions.json\"; // ‚Üê üí° THIS LINE\n\nimport { getProvider } from \"./getProvider\";\n\nconst programID = new web3.PublicKey(\"eioYwjxzGasyXTBJQ6aRJFFczARqj6yXPxMvFr56swK\"); // üëà use your real one here\nconst { SystemProgram } = web3;\n\nexport async function createPrediction(wallet, questionText) {\n  const provider = getProvider(wallet);\n  const program = new Program(idl, programID, provider);\n\n  const predictionKeypair = web3.Keypair.generate();\n\n  await program.methods\n    .createPrediction(questionText)\n    .accounts({\n      prediction: predictionKeypair.publicKey,\n      creator: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .signers([predictionKeypair])\n    .rpc();\n\n  console.log(\"‚úÖ Created prediction at:\", predictionKeypair.publicKey.toBase58());\n}"],"mappings":"AAAA;AACA,SAASA,OAAO,EAAEC,IAAI,QAAQ,uBAAuB;AACrD,OAAOC,GAAG,MAAM,+BAA+B,CAAC,CAAC;;AAEjD,SAASC,WAAW,QAAQ,eAAe;AAE3C,MAAMC,SAAS,GAAG,IAAIH,IAAI,CAACI,SAAS,CAAC,6CAA6C,CAAC,CAAC,CAAC;AACrF,MAAM;EAAEC;AAAc,CAAC,GAAGL,IAAI;AAE9B,OAAO,eAAeM,gBAAgBA,CAACC,MAAM,EAAEC,YAAY,EAAE;EAC3D,MAAMC,QAAQ,GAAGP,WAAW,CAACK,MAAM,CAAC;EACpC,MAAMG,OAAO,GAAG,IAAIX,OAAO,CAACE,GAAG,EAAEE,SAAS,EAAEM,QAAQ,CAAC;EAErD,MAAME,iBAAiB,GAAGX,IAAI,CAACY,OAAO,CAACC,QAAQ,CAAC,CAAC;EAEjD,MAAMH,OAAO,CAACI,OAAO,CAClBR,gBAAgB,CAACE,YAAY,CAAC,CAC9BO,QAAQ,CAAC;IACRC,UAAU,EAAEL,iBAAiB,CAACM,SAAS;IACvCC,OAAO,EAAET,QAAQ,CAACF,MAAM,CAACU,SAAS;IAClCE,aAAa,EAAEd,aAAa,CAACe;EAC/B,CAAC,CAAC,CACDC,OAAO,CAAC,CAACV,iBAAiB,CAAC,CAAC,CAC5BW,GAAG,CAAC,CAAC;EAERC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEb,iBAAiB,CAACM,SAAS,CAACQ,QAAQ,CAAC,CAAC,CAAC;AACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}